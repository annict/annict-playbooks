# クリティカルなエラーのみログに出力する
error_log /var/log/nginx/error.log crit;

pid /var/run/nginx.pid;

# ワーカの数を指定する
# auto: CPUのコア数をもとに自動的に調整する
worker_processes auto;

# 各ワーカがオープンできるファルディスクリプタの最大数
# 大量のファイルを処理させる場合には、この値を大きくする
worker_rlimit_nofile 100000;


events {
  # リスニングキューに溜まっている全ての接続を1度に受け入れてよいかどうか
  # on: 受け入れる
  multi_accept on;

  # イベントモデルを選択する
  # epoll: Linux 2.6+ ベースのOSで使用できる効率的なイベントモデル
  use epoll;

  # 各ワーカが処理する接続数を指定する。この値を超えると503を返す
  worker_connections 2048;
}


http {
  charset UTF-8;

  # クライアント要求本体を読み出しているときの非アクティブタイムアウト値を定義する
  # ワーカが重い処理に掛かりっきりにならないように、短い秒数を指定する
  client_body_timeout 20;

  # クライアント要求ヘッダを読み出しているときの非アクティブタイム値を定義する
  # ワーカが重い処理に掛かりっきりにならないように、短い秒数を指定する
  # デフォルト: 60
  client_header_timeout 20;

  default_type text/html;

  gzip on;
  gzip_proxied any;
  gzip_min_length 256;
  gzip_comp_level 4;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  include /etc/nginx/mime.types;

  # Keep-Aliveのタイムアウトの秒数を指定する
  # ワーカが重い処理に掛かりっきりにならないように、短い秒数を指定する
  # デフォルト: 75
  keepalive_timeout 20;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # TODO: 画像やfaviconなどのログは吐かないようにする
  access_log /var/log/nginx/access.log  main;

  open_file_cache max=100000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  # 反応がないクライアントとの接続を切るかどうかを定義する
  reset_timedout_connection on;

  # レスポンスのタイムアウト値を定義する
  send_timeout 20;

  # コンテンツのファイルの読み込みとクライアントへの
  # レスポンスの送信にsendfile APIを使うかを設定する
  # sendfileを使うとカーネル空間内でファイルの読み込みと送信が完了するため、
  # 効率良くファイルの内容をクライアントに送信することができる
  sendfile on;

  # TCP_NODELAY ソケットオプションを有効/無効にする
  # 有効にすると、タイムリーなデータ伝送を行うため、小さな情報を立て続けに送る
  # on: 有効
  tcp_nodelay on;

  # TCP_CORKソケットオプションを使うかどうかを設定する
  # 有効にすると、レスポンスヘッダとファイルの内容をまとめて送るようになり、
  # 少ないパケット数で効率良く送ることができる
  # on: 有効
  tcp_nopush on;

  # HTTPレスポンスヘッダからサーバのバージョン表示を消す
  server_tokens off;

  upstream application-unicorn {
    # Unicornのソケットを指定:
    server unix:{{ user_path }}/shared/sockets/unicorn.sock fail_timeout=0;
  }

  server {
    client_max_body_size 4G;
    server_name _;  # all accept

    keepalive_timeout 5;

    # path for static files
    root {{ user_path }}/current/public;

    try_files $uri/index.html $uri.html $uri @tagrid;

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      proxy_set_header Host $http_host;
      proxy_redirect off;

      # 振り分け先のアプリケーションを指定
      proxy_pass http://application-unicorn;
    }

    location ~ ^/(assets|images|javascripts|stylesheets|system)/ {
      gzip_static on;
      expires     max;
      add_header  Cache-Control public;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root {{ user_path }}/current/public;
    }
  }
}
